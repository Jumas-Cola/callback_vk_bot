<?php
//const clientID = "2274003"                      //VK for Android app client_id
//const clientSecret = "hHbZxrka2uZ6jB1inYsH"     //VK for Android app client_secret
//const clientID = "3697615"                      //VK for Windows app client_id
//const clientSecret = "AlVXZFMUqyrnABp8ncuU"     //VK for Windows app client_secret
//const clientID = "3140623"                        //VK for iPhone app client_id
//const clientSecret = "VeWdmVclDCtn6ihuP1nt"       //VK for iPhone app client_secret


function getToken($client_id, $client_secret, $login, $password) {
	$file = 'access_token.txt';
	if (is_file($file)) {
		$accessToken = file_get_contents($file);
	} else {
		$getToken = json_decode(file_get_contents('https://oauth.vk.com/token?grant_type=password&client_id='.$client_id.'&client_secret='.$client_secret.'&username='.$login.'&password='.$password.'&v=5.37&2fa_supported=1'));
	    $accessToken = $getToken->access_token;
	}
	file_put_contents($file, $accessToken);
	return $accessToken;
}

$client_id = 3140623;

$client_secret = 'VeWdmVclDCtn6ihuP1nt';

$login = 'login';

$password = 'password';

//...—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
$groups = array(-168416289, -168416289, -168416289);

//...—Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É/–∫–æ–Ω–∫—É—Ä—Å –∏ —Ç–¥)
$stop_words = array('–∫–æ–Ω–∫—É—Ä—Å','—Ä–æ–∑—ã–≥—Ä—ã—à','–ø—Ä–∏–∑','–∏—Ç–æ–≥–∏','—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');

if (!isset($_REQUEST)) {
    return;
}

//–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Callback API
$confirmationToken = 'confirmationToken';

//–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
$token = 'token';

// Secret key
$secretKey = 'secretKey';

//–ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
$data = json_decode(file_get_contents('php://input'));

// –ø—Ä–æ–≤–µ—Ä—è–µ–º secretKey
if(strcmp($data->secret, $secretKey) !== 0 && strcmp($data->type, 'confirmation') !== 0)
    return;

//–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ "type"
switch ($data->type) {
    //–ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...
    case 'confirmation':
        //...–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        echo $confirmationToken;
        break;

    //–ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...
    case 'message_new':
        //...–ø–æ–ª—É—á–∞–µ–º id –µ–≥–æ –∞–≤—Ç–æ—Ä–∞
        $userId = $data->object->user_id;

        //...–ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        $body_var = $data->object->body;
        $body = mb_strtolower($body_var);
        

        //..–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if ((strpos($body, '–ª–æ–ª–∏') !== false) or (strpos($body, 'loli') !== false) or (strpos($body, '—Ç—è–Ω') !== false) or (strpos($body, '–ª–æ–ª—é') !== false) or (strpos($body, '–ª–æ–ª—è') !== false)) {
            try {
            	//...–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —á–∏—Ç–∞–µ—Ç –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ –ø–∏—à–µ—Ç –≤ —Ñ–∞–π–ª
                $accessToken = getToken($client_id, $client_secret, $login, $password);

                //...–≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞
                $rand_elem = array_rand($groups);
                $group_id = $groups[$rand_elem];

                //...–ø–æ–ª—É—á–∞–µ–º 100 –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–µ–Ω—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                $request_params = array(
                        'owner_id' => $group_id,
                        'count' => 100,
                    	'filter' => 'owner',
                        'v' => '5.52',
                        'access_token' => $accessToken
                    );

                $get_params = http_build_query($request_params);
                $posts = json_decode(file_get_contents('https://api.vk.com/method/wall.get?'. $get_params));
                $posts_array = $posts->response->items;

                $loli = '';

                //...–ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ —Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–Ω–µ—Ç –ª–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å—Ç–∞/–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º
                while (!$loli) {
                  $got_stop_words = FALSE;
                  $i = rand(2, 99);
                  $post = $posts_array[$i];
                  foreach ($stop_words as $word) {
                    if (strpos(mb_strtolower($post->text), $word) !== false) {
                      $got_stop_words = TRUE;
                      break;
                    }
                  }
                  if (($post->attachments) && !$got_stop_words && ($post->marked_as_ads == 0)) {
                    $attachments = $post->attachments;
                    foreach ($attachments as $attachment) {
                      if ($attachment->type == 'photo') {
                        $photo = $attachment->photo;
                        $loli = sprintf( 'photo%d_%d', $photo->owner_id, $photo->id);
                        break;
                      }
                    }
                  }
                }

                //–° –ø–æ–º–æ—â—å—é messages.send –∏ —Ç–æ–∫–µ–Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
                $request_params = array(
                'user_id' => $userId,
                'attachment' => $loli,
                'access_token' => $token,
                'read_state' => 1,
                'v' => '5.0'
                );

                $get_params = http_build_query($request_params);

                file_get_contents('https://api.vk.com/method/messages.send?' . $get_params);

                //–í–æ–∑–≤—Ä–∞—â–∞–µ–º "ok" —Å–µ—Ä–≤–µ—Ä—É Callback API
                echo('ok');

                break;

            } catch (Exception $e) {}
        } else {
        	//...–µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            $request_params = array(
                'message' => "–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—É —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–≥—É üòâ<br>".
                                "–ù–µ —Å–∫—É—á–∞–π, –º–æ–∂–µ—à—å –ø–æ–∫–∞ –ø–æ–ª–∏—Å—Ç–∞—Ç—å —Å—Ç–µ–Ω—É –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã)",
                'user_id' => $userId,
                'access_token' => $token,
                'read_state' => 1,
                'v' => '5.0'
            );

            $get_params = http_build_query($request_params);

            file_get_contents('https://api.vk.com/method/messages.send?' . $get_params);

            //–í–æ–∑–≤—Ä–∞—â–∞–µ–º "ok" —Å–µ—Ä–≤–µ—Ä—É Callback API
            echo('ok');

            break;
        }

    // –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    case 'group_leave':
        //...–ø–æ–ª—É—á–∞–µ–º id –≤—ã—à–µ–¥—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        $userId = $data->object->user_id;

        //–° –ø–æ–º–æ—â—å—é messages.send –∏ —Ç–æ–∫–µ–Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $request_params = array(
            'message' => "–ñ–∞–ª—å, —á—Ç–æ —Ç—ã —É–∂–µ —É—Ö–æ–¥–∏—à—å!<br>" .
                            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è - –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ —Ç–µ–±–µ —Ä–∞–¥—ã.<br>" .
                            "–£–¥–∞—á–∏ —Ç–µ–±–µ „ÉΩ(„Éª‚àÄ„Éª)Ôæâ",
            'user_id' => $userId,
            'access_token' => $token,
            'read_state' => 1,
            'v' => '5.0'
        );

        $get_params = http_build_query($request_params);

        file_get_contents('https://api.vk.com/method/messages.send?' . $get_params);

        //–í–æ–∑–≤—Ä–∞—â–∞–µ–º "ok" —Å–µ—Ä–≤–µ—Ä—É Callback API
        echo('ok');

        break;
}
?>